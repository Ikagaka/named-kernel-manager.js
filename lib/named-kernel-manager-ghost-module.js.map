{"version":3,"sources":["lib/named-kernel-manager-ghost-module.js"],"names":[],"mappings":"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","file":"named-kernel-manager-ghost-module.js","sourcesContent":["import {Shiorif} from 'shiorif';\r\nimport {SakuraScriptExecuter} from 'sakurascript';\r\nimport {NamedKernelManager} from './named-kernel-manager';\r\n\r\nexport class NamedKernelManagerGhostModule {\r\n  /**\r\n   * デフォルトのゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  static get GhostViewClass() { return NamedKernelManager._GhostViewClass; }\r\n\r\n  /**\r\n   * デフォルトのゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  static set GhostViewClass(value) { NamedKernelManager._GhostViewClass = value; }\r\n\r\n  /**\r\n   * ゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  get GhostViewClass() { return this._GhostViewClass || NamedKernelManager._GhostViewClass; }\r\n\r\n  /**\r\n   * ゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  set GhostViewClass(value) { this._GhostViewClass = value; }\r\n\r\n  /**\r\n   * load ghost\r\n   * @param {string} named_id - named id\r\n   * @param {GhostProfile} [profile] - profile\r\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\r\n   * @param {Hash<GhostKernelController>} [controllers] - コントローラ\r\n   * @return {Promise<GhostKernel>} ghost kernel instance\r\n   */\r\n  async load_ghost(named_id, profile, routes, controllers) {\r\n    if (this.is_kernel_exists(named_id)) {\r\n      throw new Error(`ghost [${named_id}] already exists`);\r\n    }\r\n\r\n    const kernel = await this._get_ghost_kernel_as_profile(named_id, profile, routes, controllers);\r\n    this.register_kernel(named_id, kernel);\r\n    return kernel;\r\n  }\r\n  // then kernel.start()\r\n\r\n  /**\r\n   * load ghost\r\n   * @param {string} named_id - named id\r\n   * @param {GhostProfile} [profile] - profile\r\n   */\r\n  async _get_ghost_profile(named_id, profile) {\r\n    return profile || await this.storage.ghost_profile(named_id);\r\n  }\r\n\r\n  /**\r\n   * load ghost\r\n   * @param {string} named_id - named id\r\n   * @param {GhostProfile} [default_profile] - profile\r\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\r\n   * @param {Hash<GhostKernelController>} [controllers] - コントローラ\r\n   */\r\n  async _get_ghost_kernel_as_profile(named_id, default_profile, routes, controllers) {\r\n    const profile = await this._get_ghost_profile(named_id, default_profile);\r\n    return await this._get_ghost_kernel(named_id, profile.shell_name, profile.balloon_name, routes, controllers);\r\n  }\r\n\r\n  /**\r\n   * build ghost kernel\r\n   * @param {string} named_id - named id\r\n   * @param {string} shellname - shellname\r\n   * @param {string} balloonname - balloonname\r\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\r\n   * @param {Hash<GhostKernelController>} [controllers] - コントローラ\r\n   * @return {Promise<GhostKernel>} ghost kernel instance\r\n   */\r\n  async _get_ghost_kernel(named_id, shellname, balloonname, routes, controllers) {\r\n    return Promise.all([\r\n      this._get_ghost(named_id, storage),\r\n      this._get_shell(named_id, shellname, storage),\r\n      this._get_balloon(balloonname, storage),\r\n    ]).then(\r\n      ([shiori, shell, balloon]) => {\r\n        const shiorif = new Shiorif(shiori);\r\n        const named = namedmanager.materialize2(shell, balloon);\r\n        const ssp = new SakuraScriptExecuter(named);\r\n        return new GhostKernel({\r\n          shiorif,\r\n          view: named,\r\n          ssp,\r\n          manager: this,\r\n          time: this.time\r\n        }, routes, controllers);\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * ensure path separator at dirpath' end\r\n   * @param {string} dirpath - dirpath\r\n   * @return {string} dirpath that ends with path separator\r\n   */\r\n  static _canondirpath(dirpath) {\r\n    const path_separator = dirpath.match(/[\\\\\\/]/)[0];\r\n    return dirpath.replace(\r\n      new RegExp('\\\\' + path_separator + '?$'),\r\n      path_separator\r\n    );\r\n  }\r\n\r\n  /**\r\n   * get ghost(shiori) instance\r\n   * @param {string} named_id - named id\r\n   * @return {Promise<Shiori>} ghost(shiori) instance\r\n   */\r\n  async _get_ghost(named_id) {\r\n    this.emit('ghost_load', named_id);\r\n    const dirpath = NamedKernelManager._get_ghost_directory_path(named_id);\r\n    const ghost = await NamedKernelManager._load_ghost(storage.backend.fs, dirpath);\r\n    this.emit('ghost_loaded', named_id);\r\n    return ghost;\r\n  }\r\n\r\n  /**\r\n   * get ghost directory path\r\n   * @param {string} named_id - named id\r\n   * @return {string} ghost directory path\r\n   */\r\n  static _get_ghost_directory_path(named_id) {\r\n    return NamedKernelManager._canondirpath(this.storage.ghost_master_path(named_id));\r\n  }\r\n\r\n  /**\r\n   * load ghost(shiori)\r\n   * @param {NanikaDirectory} ghost directory contents\r\n   * @return {Promise<Shiori>} ghost(shiori) instance\r\n   */\r\n  static async _load_ghost(fs, dirpath) {\r\n    const shiori = await ShioriLoader.detect_shiori(fs, dirpath);\r\n    return await shiori.load(dirpath);\r\n  }\r\n\r\n  /**\r\n   * get shell instance\r\n   * @param {string} named_id - named id\r\n   * @param {string} shellname - shellname\r\n   * @return {Promise<Shell>} shell instance\r\n   */\r\n  async _get_shell(named_id, shellname) {\r\n    this.emit('load_shell_files', named_id, shellname);\r\n    const directory = await this._get_shell_directory(named_id, shellname);\r\n    this.emit('shell_load', named_id, shellname, directory);\r\n    const shell = await NamedKernelManager._load_shell(directory);\r\n    this.emit('shell_loaded', named_id, shellname, shell);\r\n    return shell;\r\n  }\r\n\r\n  /**\r\n   * get shell directory contents\r\n   * @param {string} named_id - named id\r\n   * @param {string} shellname - shellname\r\n   * @return {Promise<NanikaDirectory>} shell directory contents\r\n   */\r\n  async _get_shell_directory(named_id, shellname) {\r\n    return await this.storage.shell(named_id, shellname);\r\n  }\r\n\r\n  /**\r\n   * load shell\r\n   * @param {NanikaDirectory} shell directory contents\r\n   * @return {Promise<Shell>} shell instance\r\n   */\r\n  static _load_shell(directory) {\r\n    const shell = new this.GhostViewClass.Shell(directory.asArrayBuffer());\r\n    return shell.load();\r\n  }\r\n\r\n  /**\r\n   * get balloon instance\r\n   * @param {string} balloonname - balloonname\r\n   * @return {Promise<Balloon>} balloon instance\r\n   */\r\n  async _get_balloon(balloonname) {\r\n    this.emit('load_balloon_files', balloonname);\r\n    const directory = await this._get_balloon_directory(balloonname);\r\n    this.emit('balloon_load', balloonname, directory);\r\n    const balloon = await NamedKernelManager._load_balloon(directory);\r\n    this.emit('balloon_loaded', balloonname, shell);\r\n    return balloon;\r\n  }\r\n\r\n  /**\r\n   * get balloon directory contents\r\n   * @param {string} balloonname - balloonname\r\n   * @return {Promise<NanikaDirectory>} balloon directory contents\r\n   */\r\n  async _get_balloon_directory(balloonname) {\r\n    return await this.storage.balloon(balloonname);\r\n  }\r\n\r\n  /**\r\n   * load balloon\r\n   * @param {NanikaDirectory} balloon directory contents\r\n   * @return {Promise<Balloon>} balloon instance\r\n   */\r\n  static _load_balloon(directory) {\r\n    const balloon = new this.GhostViewClass.Balloon(directory.asArrayBuffer());\r\n    return balloon.load();\r\n  }\r\n}\r\n"]}