{"version":3,"sources":["lib/named-kernel-manager-ghost-module.js"],"names":[],"mappings":"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","file":"named-kernel-manager-ghost-module.js","sourcesContent":["import {Shiorif} from 'shiorif';\r\nimport {SakuraScriptExecuter} from 'sakurascript';\r\n\r\nexport class NamedKernelManagerGhostModule {\r\n  /**\r\n   * デフォルトのゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  static get GhostViewClass() { return NamedKernelManager._GhostViewClass; }\r\n\r\n  /**\r\n   * デフォルトのゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  static set GhostViewClass(value) { NamedKernelManager._GhostViewClass = value; }\r\n\r\n  /**\r\n   * ゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  get GhostViewClass() { return this._GhostViewClass || NamedKernelManager._GhostViewClass; }\r\n\r\n  /**\r\n   * ゴーストのビュークラス\r\n   * @type {cuttlebone}\r\n   */\r\n  set GhostViewClass(value) { this._GhostViewClass = value; }\r\n\r\n  /**\r\n   * load ghost\r\n   * @param {string} named_id - named id\r\n   * @param {GhostProfile} [profile] - profile\r\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\r\n   * @param {Hash<GhostKernelController>} [controllers] - コントローラ\r\n   * @return {Promise<GhostKernel>} ghost kernel instance\r\n   */\r\n  load_ghost(named_id, profile, routes, controllers) {\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        if (this.is_kernel_exists(named_id)) {\r\n          return reject(new Error(`ghost [${named_id}] already exists`));\r\n        }\r\n\r\n        const kernel = this._get_ghost_kernel_as_profile(named_id, profile, routes, controllers);\r\n        this.register_kernel(named_id, kernel);\r\n        resolve(kernel);\r\n      }\r\n    );\r\n  }\r\n  // then kernel.start()\r\n\r\n  /**\r\n   * load ghost\r\n   * @param {string} named_id - named id\r\n   * @param {GhostProfile} [profile] - profile\r\n   */\r\n  _get_ghost_profile(named_id, profile) {\r\n    return new Promise((resolve, reject) =>\r\n      resolve(profile || this.storage.ghost_profile(named_id))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * load ghost\r\n   * @param {string} named_id - named id\r\n   * @param {GhostProfile} [profile] - profile\r\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\r\n   * @param {Hash<GhostKernelController>} [controllers] - コントローラ\r\n   */\r\n  _get_ghost_kernel_as_profile(named_id, profile, routes, controllers) {\r\n    return this._get_ghost_profile(named_id, profile).then((profile) =>\r\n      this._get_ghost_kernel(named_id, profile.shell_name, profile.balloon_name, routes, controllers)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * build ghost kernel\r\n   * @param {string} named_id - named id\r\n   * @param {string} shellname - shellname\r\n   * @param {string} balloonname - balloonname\r\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\r\n   * @param {Hash<GhostKernelController>} [controllers] - コントローラ\r\n   * @return {Promise<GhostKernel>} ghost kernel instance\r\n   */\r\n  _get_ghost_kernel(named_id, shellname, balloonname, routes, controllers) {\r\n    return Promise.all([\r\n      this._get_ghost(named_id, storage),\r\n      this._get_shell(named_id, shellname, storage),\r\n      this._get_balloon(balloonname, storage),\r\n    ]).then(\r\n      ([shiori, shell, balloon]) => {\r\n        const shiorif = new Shiorif(shiori);\r\n        const named = namedmanager.materialize2(shell, balloon);\r\n        const ssp = new SakuraScriptExecuter(named);\r\n        return new GhostKernel({\r\n          shiorif,\r\n          view: named,\r\n          ssp,\r\n          manager: this,\r\n          time: this.time\r\n        }, routes, controllers);\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * ensure path separator at dirpath' end\r\n   * @param {string} dirpath - dirpath\r\n   * @return {string} dirpath that ends with path separator\r\n   */\r\n  static _canondirpath(dirpath) {\r\n    const path_separator = dirpath.match(/[\\\\\\/]/)[0];\r\n    return dirpath.replace(\r\n      new RegExp('\\\\' + path_separator + '?$'),\r\n      path_separator\r\n    );\r\n  }\r\n\r\n  /**\r\n   * get ghost(shiori) instance\r\n   * @param {string} named_id - named id\r\n   * @return {Promise<Shiori>} ghost(shiori) instance\r\n   */\r\n  _get_ghost(named_id) {\r\n    this.emit('ghost_load', named_id);\r\n    const dirpath = NamedKernelManager._get_ghost_directory_path(named_id);\r\n    return NamedKernelManager._load_ghost(storage.backend.fs, dirpath).then(\r\n      (ghost) => {\r\n        this.emit('ghost_loaded', named_id);\r\n        return ghost;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * get ghost directory path\r\n   * @param {string} named_id - named id\r\n   * @return {string} ghost directory path\r\n   */\r\n  static _get_ghost_directory_path(named_id) {\r\n    return NamedKernelManager._canondirpath(this.storage.ghost_master_path(named_id));\r\n  }\r\n\r\n  /**\r\n   * load ghost(shiori)\r\n   * @param {NanikaDirectory} ghost directory contents\r\n   * @return {Promise<Shiori>} ghost(shiori) instance\r\n   */\r\n  static _load_ghost(fs, dirpath) {\r\n    return ShioriLoader.detect_shiori(fs, dirpath).then(\r\n      (shiori) => shiori.load(dirpath)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * get shell instance\r\n   * @param {string} named_id - named id\r\n   * @param {string} shellname - shellname\r\n   * @return {Promise<Shell>} shell instance\r\n   */\r\n  _get_shell(named_id, shellname) {\r\n    this.emit('load_shell_files', named_id, shellname);\r\n    return this\r\n      ._get_shell_directory(named_id, shellname)\r\n      .then(\r\n        (directory) => {\r\n          this.emit('shell_load', named_id, shellname, directory);\r\n          return NamedKernelManager._load_shell(directory);\r\n        }\r\n      ).then(\r\n        (shell) => {\r\n          this.emit('shell_loaded', named_id, shellname, shell);\r\n          return shell;\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * get shell directory contents\r\n   * @param {string} named_id - named id\r\n   * @param {string} shellname - shellname\r\n   * @return {Promise<NanikaDirectory>} shell directory contents\r\n   */\r\n  _get_shell_directory(named_id, shellname) {\r\n    return this.storage.shell(named_id, shellname);\r\n  }\r\n\r\n  /**\r\n   * load shell\r\n   * @param {NanikaDirectory} shell directory contents\r\n   * @return {Promise<Shell>} shell instance\r\n   */\r\n  static _load_shell(directory) {\r\n    const shell = new this.GhostViewClass.Shell(directory.asArrayBuffer());\r\n    return shell.load();\r\n  }\r\n\r\n  /**\r\n   * get balloon instance\r\n   * @param {string} balloonname - balloonname\r\n   * @return {Promise<Balloon>} balloon instance\r\n   */\r\n  _get_balloon(balloonname) {\r\n    this.emit('load_balloon_files', balloonname);\r\n    return this\r\n      ._get_balloon_directory(balloonname)\r\n      .then(\r\n        (directory) => {\r\n          this.emit('balloon_load', balloonname, directory);\r\n          return NamedKernelManager._load_balloon(directory);\r\n        }\r\n      ).then(\r\n        (balloon) => {\r\n          this.emit('balloon_loaded', balloonname, shell);\r\n          return balloon;\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * get balloon directory contents\r\n   * @param {string} balloonname - balloonname\r\n   * @return {Promise<NanikaDirectory>} balloon directory contents\r\n   */\r\n  _get_balloon_directory(balloonname) {\r\n    return this.storage.balloon(balloonname);\r\n  }\r\n\r\n  /**\r\n   * load balloon\r\n   * @param {NanikaDirectory} balloon directory contents\r\n   * @return {Promise<Balloon>} balloon instance\r\n   */\r\n  static _load_balloon(directory) {\r\n    const balloon = new this.GhostViewClass.Balloon(directory.asArrayBuffer());\r\n    return balloon.load();\r\n  }\r\n}\r\n"]}