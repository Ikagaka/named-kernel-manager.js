{"version":3,"sources":["lib/named_kernel_manager.js"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;;;;;;;;;AAMO,IAAM,kEAA6B,EAAnC;;;;;;AAMA,IAAM,wEAAgC,EAAtC;;;;IAGM,6BAAA;;;;;;;;;;;;;AAUX,oCAA2J;AAAA,QAA9I,OAA8I,QAA9I,OAA8I;AAAA,QAArI,aAAqI,QAArI,aAAqI;AAAA,QAAtH,IAAsH,QAAtH,IAAsH;AAAA,QAA/G,MAA+G,yDAAtG,+CAA4B,0BAA5B,CAAsG;AAAA,QAA7C,WAA6C,yDAA/B,6BAA+B;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;AAAA;;AAIzJ,UAAK,cAAL,GAAsB,EAAtB;AACA,UAAK,oBAAL,GAA4B,EAA5B;;AAEA,UAAK,QAAL,GAAgB,OAAhB;AACA,UAAK,cAAL,GAAsB,aAAtB;;AAEA,UAAK,OAAL,GAAe,MAAf;AACA,UAAK,MAAL,CAAY,QAAZ,QAA2B,WAA3B;AAXyJ;AAY1J;;;;;;;;;;;;;;;;gCAkBW;AACV,aAAO,OAAO,IAAP,CAAY,KAAK,cAAjB,CAAP;AACD;;;;;;;;;;qCAOgB,UAAU;;AAEzB,aAAO,KAAK,cAAL,CAAoB,cAApB,CAAmC,QAAnC,CAAP;AACD;;;;;;;;;;2BAOM,UAAU;AACf,aAAO,KAAK,gBAAL,CAAsB,QAAtB,IAAkC,KAAK,cAAL,CAAoB,QAApB,EAA8B,MAAhE,GAAyE,IAAhF;AACD;;;;;;;;;;6BAOQ,QAAQ;AAAA;;AACf,aAAO,OAAO,IAAP,CAAY,KAAK,cAAjB,EAAiC,IAAjC,CAAsC,UAAC,QAAD;AAAA,eAAc,OAAK,MAAL,CAAY,QAAZ,MAA0B,MAAxC;AAAA,OAAtC,CAAP;AACD;;;;;;;;;;;oCAQe,UAAU,QAAQ;AAChC,UAAI,KAAK,gBAAL,CAAsB,QAAtB,CAAJ,EAAqC;AACnC,cAAM,IAAI,KAAJ,cAAqB,QAArB,sBAAN;AACD;AACD,WAAK,cAAL,CAAoB,QAApB,IAAgC,MAAhC;AACA,WAAK,IAAL,CAAU,mBAAV,EAA+B,QAA/B;AACA,aAAO,MAAP;AACD;;;;;;;;;;sCAOiB,UAAU;AAC1B,UAAI,CAAC,KAAK,gBAAL,CAAsB,QAAtB,CAAL,EAAsC;AACpC,cAAM,IAAI,KAAJ,cAAqB,QAArB,kBAAN;AACD;AACD,aAAO,KAAK,cAAL,CAAoB,QAApB,CAAP;AACA,WAAK,IAAL,CAAU,qBAAV,EAAiC,QAAjC;AACD;;;;;;;;;;;;uCASkB,SAAS,OAAO,SAAS,CAC3C;;;;;;;;;;;;gCASW,SAAS,OAAO,SAAS;;AAEpC;;;wBA3Fa;AAAE,aAAO,KAAK,QAAZ;AAAuB;;;;;;;;;wBAMnB;AAAE,aAAO,KAAK,cAAZ;AAA6B;;;;;;AAwFrD,MAAM,kBAAN","file":"named_kernel_manager.js","sourcesContent":["import on from './mixin';\nimport {RoutableComponent, RoutableComponentRoutes} from 'routable-component';\nimport {NamedKernelManagerGhostModule} from './named-kernel-manager-ghost-module';\n\n/**\n * ルーティング設定クラスのリスト\n * @type {RoutableComponentRouting[]}\n */\nexport const NamedKernelManagerRoutings = [];\n\n/**\n * コントローラクラスの連想配列\n * @type {Hash<NamedKernelManagerController>}\n */\nexport const NamedKernelManagerControllers = {};\n\n/** Ukagaka baseware named manager */\nexport class NamedKernelManager extends RoutableComponent {\n  /**\n   * constructor\n   * @param {Object} event_source - Event source\n   * @param {NanikaStorage} event_source.storage - storage\n   * @param {NamedManager} event_source.named_manager - named manager\n   * @param {TimerEventSource} event_source.time - Timer event source\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\n   * @param {Hash<NamedKernelManagerController>} [controllers] - コントローラ\n   */\n  constructor({storage, named_manager, time}, routes = new RoutableComponentRoutes(NamedKernelManagerRoutings), controllers = NamedKernelManagerControllers) {\n    super();\n\n    /** @type {NamedKernel[]} */\n    this._named_kernels = {};\n    this._named_id_by_kernels = {};\n\n    this._storage = storage;\n    this._named_manager = named_manager;\n\n    this._routes = routes;\n    this.routes.setup_to(this, controllers);\n  }\n\n  /**\n   * Storage\n   * @type {NanikaStorage}\n   */\n  get storage() { return this._storage; }\n\n  /**\n   * Named Manager\n   * @type {NamedManager}\n   */\n  get named_manager() { return this._named_manager; }\n\n  /**\n   * existing named ids\n   * @return {Array<string>} named ids\n   */\n  named_ids() {\n    return Object.keys(this._named_kernels);\n  }\n\n  /**\n   * named instance exists or not\n   * @param {string} named_id - named id\n   * @return {boolean} exists or not\n   */\n  is_kernel_exists(named_id) {\n    // in や [] 等ではprototypeのものも認識するため\n    return this._named_kernels.hasOwnProperty(named_id);\n  }\n\n  /**\n   * named kernel instance\n   * @param {string} named_id - named id\n   * @return {NamedKernel} named instance\n   */\n  kernel(named_id) {\n    return this.is_kernel_exists(named_id) ? this._named_kernels[named_id].kernel : null;\n  }\n\n  /**\n   * find named id of a kernel\n   * @param {NamedKernel} kernel - named kernel\n   * @return {string} named id\n   */\n  named_id(kernel) {\n    return Object.keys(this._named_kernels).find((named_id) => this.kernel(named_id) === kernel);\n  }\n\n  /**\n   * register named kernel\n   * @param {string} named_id - named id\n   * @param {NamedKernel} kernel - kernel\n   * @return {NamedKernel} kernel\n   */\n  register_kernel(named_id, kernel) {\n    if (this.is_kernel_exists(named_id)) {\n      throw new Error(`kernel [${named_id}] already exists`);\n    }\n    this._named_kernels[named_id] = kernel;\n    this.emit('kernel_registered', named_id);\n    return kernel;\n  }\n\n  /**\n   * unregister named kernel\n   * @param {string} named_id - named id\n   * @return {void}\n   */\n  unregister_kernel(named_id) {\n    if (!this.is_kernel_exists(named_id)) {\n      throw new Error(`kernel [${named_id}] not exists`);\n    }\n    delete this._named_kernels[named_id];\n    this.emit('kernel_unregistered', named_id);\n  }\n\n  /**\n   * send communication\n   * @param {string} from_id - from named id\n   * @param {string} to_id - to named id\n   * @param {any} content - communication content\n   * @return {Promise<transactionlike>} transaction\n   */\n  send_communication(from_id, to_id, content) {\n  }\n\n  /**\n   * send notice\n   * @param {string} from_id - from named id\n   * @param {string} to_id - to named id\n   * @param {any} content - communication content\n   * @return {Promise<transactionlike>} transaction\n   */\n  send_notice(from_id, to_id, content) {\n    // other close etc\n  }\n}\n\nmixin(NamedKernelManager, NamedKernelManagerGhostModule);\n"]}